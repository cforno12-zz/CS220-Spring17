CS220 Homework 6 Due Apr. 02, 2017

Please download this file, edit it to add your answers, and submit the result in myCourses CS-220 under Content/Homework Submissions/Homework 07 Submission

1. Given the following code:
	int x = -5;
	int y = x/2;
	int z = x>>1;

   a. Will "y" and "z" have the same value?  If so, why? If not, why not?
      They are different values because when x is divided by 2, the result is -2.5, but
      since y is an int, it is rounded down to a -2. When x is bit shifted to the right
      once, it has the same mathematical operation as dividing by 2 once, but since it is a
      signed int as well as being negative it results as -3.
   b. Is the statement "shifting to the right is the same as dividing by two" correct?
      Yes, but only in unsigned or positive numbers.

2. Given the following C code (where %p in printf means print the hexadecimal value of a pointer):

	int vec[4]={6,7,8,9};
	int * vecptr=vec;
	printf("Vector is at %p\n",vecptr);
	printf("vec[2] is at %p\n",vecptr+2);
	printf("vec[2] is not at %p\n", (char *)vecptr+2);

   If the first printf statement results in "Vector is at 0x5fcb00",

   	a) What will the second printf statement print?
       8
   	b) What will the third printf statement print?
       the address of the 3rd element in the vector

3. What are the three ways we havxe discussed in class to determine the x86 assembler instructions generated by compiling a C program?

   1.
   2.
   3.

4. If you are on a little-endian machine that uses 32 bit integers, define a "palindromic" number as a number for which x==htonl(x). Is 16,843,009 a "palindromic" number?  Why or why not?
   - 
   - 16,843,009 is not palendromic becuase the hex value of 0x1010101 (big endian), so the little endian verison of that hex value is 0x01010101 which is not that same.

5. The standard library function "float powf(float a,float b)" returns the value of "a" to the power of "b". For instance, powf(2.0,3.0) return 2.0 x 2.0 x 2.0 = 8.0.  Find an integer value for "exp" for which the FRAC bits of the expression "powf(2.0,exp)" is non-zero. (Warning: the representation of INFINITY in floating point has zero FRAC bits.)
