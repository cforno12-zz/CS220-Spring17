CS-220 Spring 2017 Lab 10 answers		Due: April 25, 2017

1. Cut and paste a copy of your successful test.txt file that creates a texthex.txt
   file that invokes the target function:

X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X efbeadde
X 50064000

2. Notice that the target function in target.c ends with an "exit(0)" invocation.  The
   "exit(0)" causes the target function to return directly to the operating system cleanup
   routine instead of to the function that called "target".  If the target function had
   ended with "return false" instead of "exit(0)", would target still run sucessfully?
   If not, what might happen and why?
   Yes, but it will print the "Yech...you failed to run the target."
3. If target.c had used fgets instead of gets, would your buffer overflow attack have been succesful?
   Why or why not?
   It would not be successful because fgets knows the length of the string beforehand
4. Did the Makefile make this lab easier or harder to run?  Is it worth the time to build a correct
   Makefile so that dependencies are automatically taken care of?
   Yes, made my efficiency in running tests much faster. It is completely worth the time.
5. Now that you know how to do a buffer overflow attack, could you do a buffer overflow
   attack on target WITHOUT looking at target.c?  If not, why not?  If so, what tools
   would you use to figure out what is in the "target" executable file?
   Yes, I would be able to because I would look at the target executable with gdb.
